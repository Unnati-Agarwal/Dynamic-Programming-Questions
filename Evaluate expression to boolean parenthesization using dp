class Solution{
public:

    int solve(string s,int i,int j,bool b,unordered_map<string,int> &mp)
    {
        if(i>j)
          return false;
          
        if(i==j)
        {
            if(b==true)
              return s[i]=='T';
            else
              return s[i]=='F';
        }
        
        string str=to_string(i);
        str.push_back(' ');
        str.append(to_string(j));
        str.push_back(' ');
        str.append(to_string(b));
        
        if(mp.find(str)!=mp.end())
          return mp[str];
          
        int count=0;
        for(int k=i+1;k<j;k+=2)
        {
            int lt=solve(s,i,k-1,true,mp);
            int lf=solve(s,i,k-1,false,mp);
            int rt=solve(s,k+1,j,true,mp);
            int rf=solve(s,k+1,j,false,mp);
            if(s[k]=='^')
            {
                if(b==true)
                  count+=lt*rf+lf*rt;
                else
                  count+=lt*rt+lf*rf;
            }
            else if(s[k]=='&')
            {
                if(b==true)
                   count+=lt*rt;
                else
                   count+=lf*rf+lt*rf+lf*rt;
            }
            else if(s[k]=='|')
            {
                if(b==true)
                   count+=lt*rt+lt*rf+lf*rt;
                else
                   count+=lf*rf;
            }
        }
        mp[str]=count;
        return mp[str]=(count%1003);
    }
    int countWays(int N, string S)
    {
        // code here
        unordered_map<string,int>mp;
        return solve(S,0,N-1,true,mp);
    }
};
