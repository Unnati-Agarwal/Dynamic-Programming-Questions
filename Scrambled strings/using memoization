bool solve(string a,string b,unordered_map<string,bool>&mp)
    {
        if(a.compare(b)==0)
            return true;
        
         if(a.length()<=1)
             return false;
        
        string ans=a;
        ans.push_back(' ');
        ans+=b;
        if(mp.find(ans)!=mp.end())
            return mp[ans];
        
        
        int n=a.length();
        bool f=false;
        for(int i=1;i<n;i++)
        {
            if((solve(a.substr(0,i),b.substr(0,i),mp)==true) and (solve(a.substr(i,n-i),b.substr(i,n-i),mp)==true))
            {
                f=true;
                break;
            }
            if((solve(a.substr(0,i),b.substr(n-i,i),mp)==true) and (solve(a.substr(i,n-i),b.substr(0,n-i),mp)==true))
            {
               f=true;
               break;
            }
        }
        return mp[ans]=f;
    }
    bool isScramble(string s1, string s2) 
    {
        if(s1.length()!=s2.length())
            return false;
        
        if(s1.empty() and s2.empty())
            return true;
        
        unordered_map<string,bool>mp;
        return solve(s1,s2,mp);
    }
